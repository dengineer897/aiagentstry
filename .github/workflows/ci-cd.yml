name: TaskFlow CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Test backend
        run: |
          cd backend
          pip install -r requirements.txt
          python manage.py test

      - name: Test frontend
        run: |
          cd frontend
          npm ci
          npm run test
          npm run build

  build:
    runs-on: self-hosted
    needs: test
    if: github.event_name == 'push'
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build backend image
        id: build-backend
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} ./backend
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build frontend image
        id: build-frontend
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }} ./frontend
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-staging:
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          cd /opt/taskflow/staging
          export BACKEND_IMAGE="${{ needs.build.outputs.backend-image }}"
          export FRONTEND_IMAGE="${{ needs.build.outputs.frontend-image }}"
          docker-compose down
          docker-compose pull
          docker-compose up -d
          
      - name: Health check
        run: |
          sleep 30
          curl -f http://staging.taskflow.local/health || exit 1

  deploy-production:
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Blue-green deployment
        run: |
          cd /opt/taskflow/production
          export BACKEND_IMAGE="${{ needs.build.outputs.backend-image }}"
          export FRONTEND_IMAGE="${{ needs.build.outputs.frontend-image }}"
          ./scripts/blue-green-deploy.sh
          
      - name: Production health check
        run: |
          sleep 60
          curl -f https://taskflow.local/health || exit 1
